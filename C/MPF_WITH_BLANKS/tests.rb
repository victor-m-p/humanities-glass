require 'parallel'

set=[100].collect { |num|
  ans=Parallel.map(Array.new(100) {}, in_processes: 10) { `./mpf -s 400 20 1.0 #{num}`.scan(/Correlation:[^\n]+\n/)[0].split(" ")[-1].to_f }
  out=[1, ans.mean, (ans.var/ans.length)**0.5]
  print "#{out}\n"
  out
}

[1, 0.7519719200000001, 0.005346707504168898] # why is it easier here? maybe it's a phase transition thing
[10, 0.6623079700000002, 0.007985777085837734]
[100, 0.6035266900000004, 0.007655015412442944]
[1000, 0.5666271000000002, 0.0093221836193083]

## now add in neighbour tests, and add in more stringent convergence criterion

require 'parallel'
load '../ENT/ent.rb'

class Array
  def ent_list
    count=Hash.new(0)
    self.each { |i|
      count[i.to_s.to_sym] += 1
    }
    count.to_a.collect { |i| i[1] }.ent
  end
end

set=[0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.25, 1.5, 2, 4].collect { |beta|
  ans=Parallel.map(Array.new(100) {}, in_processes: 10) { str=`./mpf -s 400 20 #{beta} 1000 #{1.0/beta**2}` }
  corr=ans.collect { |i| i.scan(/Correlation:[^\n]+\n/)[0].split(" ")[-1].to_f }
  var=ans.collect { |i| i.scan(/Variance:[^\n]+\n/)[0].split(" ")[-1].to_f**0.5 }
  clock=ans.collect { |i| i.scan(/time:[^\n]+\n/)[0].split(" ")[-2].to_f }
  data=ans.collect { |i| eval(i.scan(/data=[^\n]+\n/)[0]).ent_list }
  out=[beta, corr.mean, (corr.var/ans.length)**0.5, var.mean, (var.var/ans.length)**0.5, data.mean, (data.var/data.length)**0.5, clock.mean]
  print "#{out}\n"
  out
}


set=[0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.25, 1.5, 2, 4].collect { |beta|
  ans=Parallel.map(Array.new(100) {}, in_processes: 10) { str=`./mpf -s 400 20 #{beta} 1000 0.01` }
  corr=ans.collect { |i| i.scan(/Correlation:[^\n]+\n/)[0].split(" ")[-1].to_f }
  var=ans.collect { |i| i.scan(/Variance:[^\n]+\n/)[0].split(" ")[-1].to_f**0.5 }
  clock=ans.collect { |i| i.scan(/time:[^\n]+\n/)[0].split(" ")[-2].to_f }
  data=ans.collect { |i| eval(i.scan(/data=[^\n]+\n/)[0]).ent_list }
  out=[beta, corr.mean, (corr.var/ans.length)**0.5, var.mean, (var.var/ans.length)**0.5, data.mean, (data.var/data.length)**0.5, clock.mean]
  print "#{out}\n"
  out
}


ans=[[0.01, 0.18652207999999998, 0.007355460610956732, 0.05443172269596765, 0.00033147495153144137, 8.64360618977474, 0.00010897247358850285, 11.729373069999998], [0.05, 0.6801175899999994, 0.003583958118424237, 0.07675588204323457, 0.0004401655570925516, 8.642906189774742, 0.00022017038856302727, 11.433973479999997], [0.1, 0.8483154600000004, 0.0019891525325836626, 0.12272986081387074, 0.0007589549697308298, 8.641056189774742, 0.0003558089374931324, 10.872678010000001], [0.2, 0.8593221499999999, 0.005313328578421912, 0.23667869489556792, 0.003172105582307453, 8.490745545444579, 0.0163547363182197, 11.038177369999996], [0.3, 0.7425513200000005, 0.010374431947830977, 0.5622889434241088, 0.026123339009973285, 7.700795340712989, 0.06350509929967706, 21.21811643], [0.4, 0.63813317, 0.009152456521394186, 1.382517730145185, 0.046025370811565026, 6.139999266240002, 0.1213653162097448, 52.46787474000001], [0.5, 0.6256455999999999, 0.007298570878836488, 1.783810712916478, 0.03688504988262934, 5.088520301103187, 0.12702508363374243, 65.04685145000002], [0.6, 0.6279260900000002, 0.008293957909371073, 2.0114013104011748, 0.05916511121568501, 4.47032101724635, 0.11391068644285338, 76.32840745000003], [0.7, 0.6088070400000001, 0.009270565177225389, 1.8718294199579442, 0.06080374598492377, 3.7548555667101198, 0.10844262986602687, 72.62992867999999], [0.8, 0.58041235, 0.00833538769404729, 1.6691942788861829, 0.04715943694889053, 3.0090128994073693, 0.0902310575974827, 68.19299569000002], [0.9, 0.5753008199999999, 0.008756137401918497, 1.6874543545893455, 0.05188870215928078, 2.9443830639651, 0.0976393723130419, 71.05537974999997], [1, 0.5522124799999999, 0.008619210956676717, 1.6204848235890703, 0.047492596951261935, 2.5750190009957565, 0.08879556897073797, 67.86654969000001], [1.25, 0.5307083700000002, 0.00837599147041895, 1.5213868358005351, 0.04299933555914969, 2.3204243980335706, 0.07529211056840282, 64.72000583], [1.5, 0.5318478700000001, 0.00838297024110971, 1.615087642587913, 0.049568744866076604, 2.2564332129265514, 0.07450743486760068, 66.84308215], [2, 0.5271216600000003, 0.007965525942349573, 2.582965801733307, 0.722493609916906, 2.1828631357078163, 0.059879873458553626, 60.816473750000014], [4, 0.5981278499999996, 0.008855624515361689, 6.271678258060922, 1.4085678446825551, 2.6688515304496803, 0.05946579107466955, 61.99580174999999]]

ans2=[[0.01, 0.20136866463215, 0.007367421659811022, 0.003618802191392051, 1.763901345769671e-05, 8.64350618977474, 0.0001275735082217118, 11.26796939000001], [0.05, 0.6895371580698402, 0.003625154252165756, 0.04600107491111507, 0.0002381687710843011, 8.64335618977474, 0.00014999999999998616, 11.070785429999999], [0.1, 0.8595686772194499, 0.0017779865919365745, 0.10072474846964828, 0.0005076613635691554, 8.640556189774744, 0.0003479942528260901, 10.46144421], [0.2, 0.8764515723968603, 0.003182082818260959, 0.2114085355066295, 0.0015028940916185934, 8.513856933787002, 0.009727375696065748, 10.36523078], [0.3, 0.76680929882202, 0.008092254056048413, 0.4524844432477045, 0.010628442208534117, 7.483309406817365, 0.07594570056414976, 17.188497710000004], [0.4, 0.7159919987752699, 0.008021431905535408, 0.7398722348890232, 0.011253576589445698, 6.32436506758093, 0.1003830291718341, 28.54545364000001], [0.5, 0.6838256796019802, 0.00932125370947378, 0.9470853244055555, 0.0115379454326428, 5.249074852624163, 0.1074672471364963, 38.687600270000004], [0.6, 0.6526902894873801, 0.009304199861684697, 1.0784186723948332, 0.01478939867232108, 4.341618741949199, 0.1019622660600082, 48.92515079999998], [0.7, 0.61640695393355, 0.010498975819798506, 1.1118508112018173, 0.018689503154161388, 3.5447993866545353, 0.12354605882560085, 46.577129499999984], [0.8, 0.5831975102987501, 0.010298623995176325, 1.1159667426843967, 0.02481945969745665, 3.008481695653561, 0.11994890747234975, 48.884772410000004], [0.9, 0.5803669545273298, 0.008843003423144969, 1.1689599793418957, 0.02430448245342685, 2.9319080464337692, 0.09491990097265479, 50.85639785999998], [1, 0.5575065883920698, 0.009097794664783838, 1.1345486251111656, 0.022757736959459318, 2.7120753278404988, 0.09789141620820087, 48.57193684], [1.25, 0.5293971641762, 0.008247720647594782, 1.1635270427305298, 0.02352270755058555, 2.449154106301416, 0.0808688553232072, 47.152584400000016], [1.5, 0.5201620285655302, 0.00767067995169038, 1.1941691317846095, 0.026745228294643958, 2.1941210899487356, 0.07237545709173188, 45.988386850000005], [2, 0.5314651777030303, 0.007810090732329488, 1.293082497902824, 0.029722963641577466, 2.2335232669647804, 0.06350908317866966, 51.44437081999999], [4, 0.62539775286035, 0.006755767985028088, 2.010796919099553, 0.07620606005956596, 2.790539626346257, 0.05059916504575053, 54.29381360999995]]

set_plot, 'ps'
device, filename='PLOTS/corr.eps'
plot, ans[0,*], ans[1,*], /xlog, psym=-4, xrange=[0.009, 5], xstyle=1, xtitle='Beta', ytitle='Correlation between true and inferred parameters', title='400 observations, 20 nodes', xthick=2, ythick=2, thick=2, charthick=2
oploterror, ans[0,*], ans[1,*], ans[2,*]    
oplot, ans2[0,*], ans2[1,*], psym=-4, linestyle=2, thick=2
oploterror, ans2[0,*], ans2[1,*], ans2[2,*], linestyle=2
device, /close_file
set_plot, 'x'

set_plot, 'ps'
device, filename='PLOTS/var.eps'
plot, ans[0,*], ans[3,*]/ans[0,*], /xlog, psym=-4, xrange=[0.009, 5], xstyle=1, xtitle='Beta', ytitle='Variance of inferred parameters / Beta', title='400 observations, 20 nodes', xthick=2, ythick=2, thick=2, charthick=2
oploterror, ans[0,*], ans[3,*]/ans[0,*], ans[4,*]/ans[0,*]   
oplot, ans2[0,*], ans2[3,*]/ans2[0,*], psym=-4, linestyle=1, thick=2
oploterror, ans2[0,*], ans2[3,*]/ans2[0,*], ans2[4,*]/ans2[0,*], linestyle=2
device, /close_file
set_plot, 'x'

set_plot, 'ps'
device, filename='PLOTS/ent.eps'
plot, ans[0,*], ans[5,*], /xlog, psym=-4, xrange=[0.009, 5], xstyle=1, xtitle='Beta', ytitle='Empirical Entropy of Data', title='400 observations, 20 nodes', xthick=2, ythick=2, thick=2, charthick=2
oploterror, ans[0,*], ans[5,*], ans[6,*]   
device, /close_file
set_plot, 'x'
